{"version":3,"sources":["components/cookie.js","components/simpleCard.js","components/form.js","components/adminForm.js","components/admin.js","App.js","serviceWorker.js","index.js"],"names":["cookies","Cookies","setCookie","firstName","name","register","set","path","sameSite","getCookie","get","SimpleCard","props","useState","setFirstName","setName","className","Typography","variant","gutterBottom","Card","CardContent","color","noValidate","autoComplete","TextField","id","label","value","onChange","e","target","CardActions","Fab","onClick","Cookie","Form","registered","to","location","pathname","AdminForm","url","setUrl","copied","setCopied","createGFurl","encodeURIComponent","text","onCopy","style","Admin","Redirection","urlForm","useParams","console","log","decodedUrl","decodeURIComponent","window","href","App","setRegistered","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee179e52.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nfunction setCookie(firstName, name, register) { \n    if(firstName !== \"\" && name !== \"\") {\n        cookies.set('firstname', firstName, { path: '/', sameSite: true });\n        cookies.set('name', name, { path: '/', sameSite: true });\n        register();\n    }\n}\n\nfunction getCookie() {\n    if(cookies.get('firstname') && cookies.get('name'))  \n    {\n        const name = cookies.get('firstname') + \" \" + cookies.get('name')\n        return name\n    } else return null\n}\n\n\nexport default {setCookie, getCookie};\n\n","import React, { useState } from 'react';\nimport Cookie from './cookie';\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport DirectionsRunRoundedIcon from '@material-ui/icons/DirectionsRunRounded';\n\nimport '../App.css';\n\n\nfunction SimpleCard(props) {\n\n    const [firstName, setFirstName] = useState(\"\"); \n    const [name, setName] = useState(\"\"); \n\n    return (\n      <div className = \"card\">\n        <div className= \"icon-round\">\n          <DirectionsRunRoundedIcon className = \"icon\"/>\n        </div>\n\n        <Typography className = \"text-header\" variant=\"h6\" gutterBottom>\n          Formulaire d'inscription à la course d'orientation\n        </Typography>\n\n        <Card >\n          <CardContent >\n            <Typography className= \"\" color=\"textSecondary\" gutterBottom>\n              Merci de remplir le formulaire ci-dessous avant de commencer le parcours\n            </Typography>\n    \n            <form className = \"\" noValidate autoComplete=\"off\">\n              <TextField \n                id=\"standard-basic\" \n                className = \"champ-text\" \n                label=\"Prénom\" \n                variant=\"standard\" \n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value) }\n              />\n              <br />\n              <TextField \n                id=\"standard-basic\" \n                className = \"champ-text\" \n                label=\"Nom\" \n                variant=\"standard\" \n                value={name} \n                onChange={(e) => setName(e.target.value) }\n              />\n      \n              <CardActions>\n                <Fab variant=\"extended\" color=\"primary\" onClick={ () => Cookie.setCookie(firstName, name, props.register ) }>\n                  <SendIcon className = \"\" />\n                    Envoyer\n                </Fab>\n              </CardActions>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  export default SimpleCard;","import React from 'react';\nimport SimpleCard from './simpleCard';\nimport { BrowserRouter as Redirect} from \"react-router-dom\";\n\nfunction Form(props) {\n  \n  return (\n    props.registered === false ? \n      <div className=\"App\">\n        <div className = \"header\"></div> \n        <SimpleCard register = { props.register } />\n      </div>\n      : \n      <Redirect to={props.location.pathname} />\n  ) \n}\nexport default Form;","import React, { useState } from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport DirectionsRunRoundedIcon from '@material-ui/icons/DirectionsRunRounded';\n\nimport '../App.css';\n\n\nfunction AdminForm(props) {\n\n    const [url, setUrl] = useState(\"\"); \n    const [encodedGFurl, setEncodedGFurl] = useState(\"\");\n    const [copied, setCopied] = useState(false);\n\n    const createGFurl = (e) => {\n      const encodedURL = encodeURIComponent(url);\n      return(\"http://localhost:3000/redirect/\"+encodedURL);\n    }\n\n    return (\n      <div className = \"card\">\n        <div className= \"icon-round\">\n          <DirectionsRunRoundedIcon className = \"icon\"/>\n        </div>\n\n        <Typography className = \"text-header\" variant=\"h6\" gutterBottom>\n          Créer un nouvel url de redirection Google Form\n        </Typography>\n\n        <Card >\n          <CardContent >\n            <Typography className= \"\" color=\"textSecondary\" gutterBottom>\n              Merci de remplir le formulaire ci-dessous\n            </Typography>\n    \n            <form className = \"\" noValidate autoComplete=\"off\">\n              <TextField \n                id=\"standard-basic\" \n                className = \"champ-text\" \n                label=\"Url Google Form\" \n                variant=\"standard\" \n                value={url}\n                onChange={(e) => setUrl(e.target.value) }\n              />\n              \n              <div className = \"encodedUrl\">\n              <Typography className = \"encodedUrl\" color=\"textSecondary\" variant=\"h6\" gutterBottom>\n                { createGFurl() }\n              </Typography>\n              </div>\n\n              <CardActions>\n                <CopyToClipboard text={ createGFurl() }\n                  onCopy={() => setCopied(true)}>\n                  <Fab variant=\"extended\" color=\"primary\">\n                    <SendIcon className = \"\" />\n                      Copier l'url\n                  </Fab>\n                </CopyToClipboard>\n                {copied ? <span style={{color: '#303f9f'}}>Copier!</span> : null}\n              </CardActions>\n             \n             \n              \n            </form>\n          </CardContent>  \n        </Card>\n      </div>\n    );\n  }\n\n  export default AdminForm;","import React from 'react';\nimport AdminForm from './adminForm';\n\nfunction Admin() {\n\n  return (\n      <div className=\"App\">\n        <div className = \"header\"></div> \n        <AdminForm />\n      </div>\n\n  ) \n}\nexport default Admin;","import React, {useState} from 'react';\nimport { BrowserRouter as Router, Route, useParams} from \"react-router-dom\";\nimport './App.css';\nimport Form from './components/form';\nimport Admin from './components/admin';\n\nimport Cookie from './components/cookie';\n\n// https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=\n\nfunction Redirection() {\n  let { urlForm } = useParams();\n  console.log(urlForm)\n  const decodedUrl = decodeURIComponent(urlForm)\n  window.location.href = decodedUrl + Cookie.getCookie();\n  return null; \n}\n\nfunction App() {\n\n  const[registered, setRegistered] = useState(false);\n\n  return (\n    <Router>\n\n      <Route path='/laurent-game/admin' >\n        <Admin />\n      </Route>\n\n      <Route path='/redirect/:urlForm' component={\n        Cookie.getCookie() === null ? () => <Form registered={registered} register={ () => setRegistered(true) } /> : Redirection\n      } />\n        \n    </Router>\n  ) \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}