{"version":3,"sources":["components/cookie.js","components/radio.js","components/simpleCard.js","components/registered.js","components/form.js","App.js","serviceWorker.js","index.js"],"names":["cookies","Cookies","setCookie","firstName","name","register","set","path","sameSite","getCookie","get","GreenRadio","withStyles","root","color","green","checked","props","Radio","BlueRadio","blue","YellowRadio","yellow","RedRadio","red","RadioForm","React","useState","selectedValue","setSelectedValue","handleChange","event","target","value","className","FormLabel","component","onChange","SimpleCard","setFirstName","setName","Typography","variant","gutterBottom","Card","CardContent","noValidate","autoComplete","TextField","id","label","e","CardActions","Fab","onClick","Cookie","Registered","Form","registered","setRegistered","App","to","window","location","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddb4ca1c.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nfunction setCookie(firstName, name, register) { \n    if(firstName !== \"\" && name !== \"\") {\n        cookies.set('firstname', firstName, { path: '/', sameSite: true });\n        cookies.set('name', name, { path: '/', sameSite: true });\n        register();\n    }\n}\n\nfunction getCookie() {\n    if(cookies.get('firstname') && cookies.get('name'))  \n    {\n        const name = cookies.get('firstname') + \" \" + cookies.get('name')\n        return name\n    } else return null\n}\n\n\nexport default {setCookie, getCookie};\n\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green, blue, red, yellow } from '@material-ui/core/colors';\nimport Radio from '@material-ui/core/Radio';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst GreenRadio = withStyles({\n    root: {\n      color: green[400],\n      '&$checked': {\n        color: green[600],\n      },\n    },\n    checked: {},\n  })((props) => <Radio color=\"default\" {...props} />);\n  \nconst BlueRadio = withStyles({\nroot: {\n    color: blue[400],\n    '&$checked': {\n    color: blue[600],\n    },\n},\nchecked: {},\n})((props) => <Radio color=\"default\" {...props} />);\n\nconst YellowRadio = withStyles({\nroot: {\n    color: yellow[400],\n    '&$checked': {\n    color: yellow[600],\n    },\n},\nchecked: {},\n})((props) => <Radio color=\"default\" {...props} />);\n\nconst RedRadio = withStyles({\nroot: {\n    color: red[400],\n    '&$checked': {\n    color: red[600],\n    },\n},\nchecked: {},\n})((props) => <Radio color=\"default\" {...props} />);\n\nfunction RadioForm() {\n\n    const [selectedValue, setSelectedValue] = React.useState('a');\n    const handleChange = (event) => {\n        setSelectedValue(event.target.value);\n    };\n\n    return(\n        <div className= \"champ-text\">\n            <FormLabel component=\"legend\">Equipe</FormLabel>\n            <RedRadio\n              checked={selectedValue === 'rouge'}\n              onChange={handleChange}\n              value=\"rouge\"\n              name=\"equipe-rouge\"\n            />\n            <YellowRadio\n              checked={selectedValue === 'jaune'}\n              onChange={handleChange}\n              value=\"jaune\"\n              name=\"equipe-jaune\"\n            />\n            <BlueRadio\n              checked={selectedValue === 'bleu'}\n              onChange={handleChange}\n              value=\"bleu\"\n              name=\"equipe-bleu\"\n            />\n            <GreenRadio\n              checked={selectedValue === 'vert'}\n              onChange={handleChange}\n              value=\"vert\"\n              name=\"equipe-verte\"\n            />\n          </div>\n    )\n}\n\nexport default RadioForm;","import React, { useState } from 'react';\nimport Cookie from './cookie';\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport RadioForm from './radio';\nimport DirectionsRunRoundedIcon from '@material-ui/icons/DirectionsRunRounded';\n\nimport '../App.css';\n\n\nfunction SimpleCard(props) {\n\n    const [firstName, setFirstName] = useState(\"\"); \n    const [name, setName] = useState(\"\"); \n\n    return (\n      <div className = \"card\">\n        <div className= \"icon-round\">\n          <DirectionsRunRoundedIcon className = \"icon\"/>\n        </div>\n\n        <Typography className = \"text-header\" variant=\"h6\" gutterBottom>\n          Formulaire d'inscription à la course d'orientation\n        </Typography>\n\n        <Card >\n          <CardContent >\n            <Typography className= \"\" color=\"textSecondary\" gutterBottom>\n              Merci de remplir le formulaire ci-dessous avant de commencer le parcours\n            </Typography>\n    \n            <form className = \"\" noValidate autoComplete=\"off\">\n              <TextField \n                id=\"standard-basic\" \n                className = \"champ-text\" \n                label=\"Prénom\" \n                variant=\"standard\" \n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value) }\n              />\n              <br />\n              <TextField \n                id=\"standard-basic\" \n                className = \"champ-text\" \n                label=\"Nom\" \n                variant=\"standard\" \n                value={name} \n                onChange={(e) => setName(e.target.value) }\n              />\n    \n              <RadioForm />\n    \n              <CardActions>\n                <Fab variant=\"extended\" color=\"primary\" onClick={ () => Cookie.setCookie(firstName, name, props.register ) }>\n                  <SendIcon className = \"\" />\n                    Envoyer\n                </Fab>\n              </CardActions>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  export default SimpleCard;","import React from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport DirectionsRunRoundedIcon from '@material-ui/icons/DirectionsRunRounded';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Registered() {\n    return(\n        <div className = \"card\">\n             <div className= \"icon-round\">\n                <DirectionsRunRoundedIcon className = \"icon\"/>\n            </div>\n            <Card className= \"valide-card\">\n            <CardContent>\n                <Typography variant=\"h3\" gutterBottom>\n                Bon parcours!\n                </Typography>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default Registered;","import React, {useState} from 'react';\nimport Cookie from './cookie';\nimport SimpleCard from './simpleCard';\nimport Registered from './registered';\n\nfunction Form() {\n\n  const[registered, setRegistered] = useState(false);\n\n  return (\n    Cookie.getCookie() === null && registered === false ? \n      <div className=\"App\">\n        <div className = \"header\"></div> \n        <SimpleCard register = { () => setRegistered(true) }/>\n      </div>\n      : \n      <div className=\"App\">\n        <div className = \"header\"></div> \n        <Registered />\n      </div>\n  ) \n}\nexport default Form;","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect} from \"react-router-dom\";\nimport './App.css';\nimport Form from './components/form';\nimport Cookie from './components/cookie';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path='/' >\n        <Form />\n      </Route>\n\n      {\n        Cookie.getCookie() === null ? (\n          <Redirect to='/' />\n        ) : (\n          <div>\n            <Route path='/etape1' component={() =>\n            window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=' + Cookie.getCookie() \n            } />\n\n            <Route path='/etape2' component={() =>\n              window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=' + Cookie.getCookie() \n            } />\n\n            <Route path='/etape3' component={() =>\n              window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=' + Cookie.getCookie() \n            } />\n\n            <Route path='/etape4' component={() =>\n              window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=' + Cookie.getCookie() \n            } />\n\n            <Route path='/etape5' component={() =>\n              window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=' + Cookie.getCookie() \n            } />\n\n            <Route path='/etape6' component={() =>\n              window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=' + Cookie.getCookie() \n            } />\n\n<           Route path='/etape7' component={() =>\n              window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=' + Cookie.getCookie() \n            } />\n          </div> \n        )\n      }\n\n    </Router>\n  ) \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}