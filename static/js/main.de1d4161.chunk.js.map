{"version":3,"sources":["cookie.js","form.js","App.js","serviceWorker.js","index.js"],"names":["cookies","Cookies","setCookie","firstName","name","set","path","sameSite","getCookie","get","Form","useState","setFirstName","setName","Cookie","className","type","value","htmlFor","id","placeholder","onChange","e","target","onClick","App","to","component","window","location","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAEMA,EAAU,I,MAAIC,GAmBL,OAACC,UAjBhB,SAAmBC,EAAWC,GACT,KAAdD,GAA6B,KAATC,IACnBJ,EAAQK,IAAI,YAAaF,EAAW,CAAEG,KAAM,IAAKC,UAAU,IAC3DP,EAAQK,IAAI,OAAQD,EAAM,CAAEE,KAAM,IAAKC,UAAU,MAc9BC,UAT3B,WACI,OAAGR,EAAQS,IAAI,cAAgBT,EAAQS,IAAI,QAE1BT,EAAQS,IAAI,aAAe,IAAMT,EAAQS,IAAI,QAEhD,OC4CHC,MA1Df,WAAiB,IAAD,EAEsBC,mBAAS,IAF/B,mBAELR,EAFK,KAEMS,EAFN,OAGYD,mBAAS,IAHrB,mBAGLP,EAHK,KAGCS,EAHD,KAKZ,OAC2B,OAAvBC,EAAON,YACP,yBAAKO,UAAU,OACb,kDAEA,wEAEA,8BACE,uCACE,2BAAOC,KAAK,QAAQZ,KAAK,SAASa,MAAM,WAE1C,sCACE,2BAAOD,KAAK,QAAQZ,KAAK,SAASa,MAAM,UAE1C,sCACE,2BAAOD,KAAK,QAAQZ,KAAK,SAASa,MAAM,UAE1C,6BAEA,2BAAOC,QAAQ,UAAf,cACA,6BAEA,2BACEF,KAAK,OACLZ,KAAK,SACLe,GAAG,SACHC,YAAY,YACZH,MAAOd,EACPkB,SAAU,SAACC,GAAD,OAAOV,EAAaU,EAAEC,OAAON,UAEzC,6BAEA,2BAAOC,QAAQ,OAAf,QACA,6BAEA,2BACEF,KAAK,OACLZ,KAAK,MACLe,GAAG,MACHC,YAAY,MACZH,MAAOb,EACPiB,SAAU,SAACC,GAAD,OAAOT,EAAQS,EAAEC,OAAON,UAEpC,6BAEA,4BAAQO,QAAU,kBAAMV,EAAOZ,UAAUC,EAAWC,KAApD,QAGF,kDChBKqB,MAlCf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOnB,KAAK,KACV,kBAAC,EAAD,OAIuB,OAAvBQ,EAAON,YACL,kBAAC,IAAD,CAAUkB,GAAG,MAGb,kBAAC,IAAD,CAAOpB,KAAK,UAAUqB,UAAW,WAE/B,OADAC,OAAOC,SAASC,KAAO,kIAAoIhB,EAAON,YAC3J,QAMY,OAAvBM,EAAON,YACL,kBAAC,IAAD,CAAUkB,GAAG,MAEb,kBAAC,IAAD,CAAOpB,KAAK,UAAUqB,UAAW,WAE/B,OADAC,OAAOC,SAASC,KAAO,uIAChB,UCnBCC,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.de1d4161.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nfunction setCookie(firstName, name) { \n    if(firstName !== \"\" && name !== \"\") {\n        cookies.set('firstname', firstName, { path: '/', sameSite: true });\n        cookies.set('name', name, { path: '/', sameSite: true });\n    }\n    \n}\n\nfunction getCookie() {\n    if(cookies.get('firstname') && cookies.get('name'))  \n    {\n        const name = cookies.get('firstname') + \" \" + cookies.get('name')\n        return name\n    } else return null\n}\n\n\nexport default {setCookie, getCookie};\n\n","import React, { useState } from 'react';\nimport Cookie from './cookie';\n\nfunction Form() {\n\n    const [firstName, setFirstName] = useState(\"\"); \n    const [name, setName] = useState(\"\"); \n\n    return (\n        Cookie.getCookie() === null ? \n        <div className=\"App\">\n          <h1>le jeux de Laurent</h1>\n          \n          <p>Merci de remplir le formulaire ci-dessous</p>\n    \n          <form>\n            <label>Rouge\n              <input type=\"radio\" name=\"equipe\" value=\"rouge\" />\n            </label>\n            <label>Bleu\n              <input type=\"radio\" name=\"equipe\" value=\"bleu\" />\n            </label>\n            <label>Vert\n              <input type=\"radio\" name=\"equipe\" value=\"vert\" />\n            </label>\n            <br />\n    \n            <label htmlFor=\"prenom\">Prénom:</label>\n            <br />\n    \n            <input \n              type=\"text\" \n              name=\"prenom\"\n              id=\"prenom\"\n              placeholder=\"Prénom\"\n              value={firstName}\n              onChange={(e) => setFirstName(e.target.value) }\n            />\n            <br />\n    \n            <label htmlFor=\"nom\">Nom:</label>\n            <br />\n    \n            <input \n              type=\"text\" \n              name=\"nom\"\n              id=\"nom\"\n              placeholder=\"Nom\"\n              value={name} \n              onChange={(e) => setName(e.target.value) }\n            />\n            <br />\n    \n            <button onClick={ () => Cookie.setCookie(firstName, name) }>OK</button>\n          </form>\n        </div>\n        : <p>deja enregistré</p>\n    ) \n}\n\n\nexport default Form;","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect} from \"react-router-dom\";\nimport './App.css';\nimport Form from './form';\nimport Cookie from './cookie';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path='/' >\n        <Form />\n      </Route>\n\n      {\n        Cookie.getCookie() === null ? (\n          <Redirect to='/' />\n        ) : (\n\n          <Route path='/etape1' component={() => { \n            window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=' + Cookie.getCookie() ;\n            return null;\n          }} />\n        )\n      }\n\n{\n        Cookie.getCookie() === null ? (\n          <Redirect to='/' />\n        ) : (\n          <Route path='/etape2' component={() => { \n            window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSdhiwxLPVi_ppt84kvQwv5cNM1PbwT_o_EC8mqGZs6Z4iRx4g/viewform?usp=pp_url&entry.433624650=david' ;\n            return null;\n          }} />\n        )\n      }\n\n    </Router>\n  ) \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}